/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.Main.WorkSpaceProfiles.OrderManagement;


import model.Business.Business;
import model.CustomerManagement.CustomerProfile;
import model.OrderManagement.MasterOrderList;
import model.OrderManagement.Order;
import model.OrderManagement.OrderItem;
import model.ProductManagement.Product;
import model.ProductManagement.ProductCatalog;
import model.ProductManagement.ProductSummary;
import model.SalesManagement.SalesPersonProfile;
import model.Supplier.Supplier;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author josephjoshiaerrolla
 */
public class ProcessOrder extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;
    Order currentOrder;
    CustomerProfile customer;
    SalesPersonProfile salesperson;
    ArrayList<Integer> rowsAnalysed = new ArrayList<>();

    public ProcessOrder(Business bz, CustomerProfile cp, SalesPersonProfile spp, JPanel jp) {

        CardSequencePanel = jp;
        this.business = bz;
        initComponents();
        customer = cp;
        salesperson = spp;
        salesPersonTextField.setText(salesperson.getPerson().toString());
        customerTextField.setText(customer.getCustomerId());
        MasterOrderList mol = business.getMasterOrderList();
        currentOrder =  mol.newOrder(customer, salesperson); //no order was made yet
        initializeTable();

    }

    private void initializeTable() {

//clear supplier table
        cleanUpCombobox();
        cleanUpTable();

//load suppliers to the combobox
        ArrayList<Supplier> supplierlist = business.getSupplierDirectory().getSuplierList();

        if (supplierlist.isEmpty()) {
            return;
        }

        for (Supplier s : supplierlist) {
            
            SuppliersComboBox.addItem(s.toString());
            SuppliersComboBox.setSelectedIndex(0);
            String suppliername = (String) SuppliersComboBox.getSelectedItem();
            selectedsupplier = business.getSupplierDirectory().findSupplier(suppliername);
            ProductCatalog pc = selectedsupplier.getProductCatalog();
            for (Product pt : pc.getProductList()) {

                Object[] row = new Object[5];
                row[0] = pt;
                row[1] = pt.getFloorPrice();
                row[2] = pt.getCeilingPrice();
                row[3] = pt.getTargetPrice();

                ((DefaultTableModel) SupplierCatalogTable.getModel()).addRow(row);
            }

        }
    }

    public void cleanUpCombobox() {
        //Clean the combobox for supplier choices

        SuppliersComboBox.removeAllItems();

    }

    public void cleanUpTable() {

        //Clean the product catalog table
        int rc = SupplierCatalogTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) SupplierCatalogTable.getModel()).removeRow(i);
        }
    }
    public void cleanUpItemsTable() {

        //Clean the product catalog table
        int rc = OrderItemsTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) OrderItemsTable.getModel()).removeRow(i);
        }
    }

    public void refreshSupplierProductCatalogTable() {

//clear supplier table
        int rc = SupplierCatalogTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) SupplierCatalogTable.getModel()).removeRow(i);
        }

        String suppliername = (String) SuppliersComboBox.getSelectedItem();

        selectedsupplier = business.getSupplierDirectory().findSupplier(suppliername);
        if (selectedsupplier == null) {
            return;
        }
        ProductCatalog pc = selectedsupplier.getProductCatalog();

        for (Product pt : pc.getProductList()) {

            Object[] row = new Object[5];
            row[0] = pt;
            row[1] = pt.getFloorPrice();
            row[2] = pt.getCeilingPrice();
            row[3] = pt.getTargetPrice();
//                row[1] = pt.getPerformanceMeasure();
//               row[2] = la.getName();
            ((DefaultTableModel) SupplierCatalogTable.getModel()).addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        SupplierCatalogTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrderItemsTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        btnadd = new javax.swing.JButton();
        SuppliersComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        customerTextField = new javax.swing.JTextField();
        salesPersonTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        productFrequencyBelowTargetTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        productFrequencyAboveTargetTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        productPricePerformanceTextField = new javax.swing.JTextField();
        productRevenueTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        productNameTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtactprice = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtquantity = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        btnRecommendation = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Next.setText("Submit");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });
        add(Next, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 540, 150, 30));

        jLabel1.setText("Suppliers");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 60, -1));

        SupplierCatalogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Floor", "Ceiling", "Target"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SupplierCatalogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SupplierCatalogTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SupplierCatalogTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(SupplierCatalogTable);

        jScrollPane2.setViewportView(jScrollPane1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 600, 110));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Prepare Order");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 550, -1));

        jLabel8.setText("Product");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 20));

        OrderItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Actual price", "Quanity", "Item total", "Floor", "Ceiling", "Target"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                OrderItemsTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OrderItemsTableMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(OrderItemsTable);

        jScrollPane3.setViewportView(jScrollPane4);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 600, 100));

        jLabel9.setText("Order Items / Cart");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, 20));

        btnadd.setText("Add to Cart");
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductItemActionPerformed(evt);
            }
        });
        add(btnadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 190, 170, 30));

        SuppliersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppliersComboBoxActionPerformed(evt);
            }
        });
        add(SuppliersComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 180, -1));

        jLabel10.setText("Customer");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 150, -1));
        add(customerTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, 160, -1));
        add(salesPersonTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, 160, -1));

        jLabel11.setText("Sales person");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, 150, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Business-wide Product Intelligence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("Frequency Below Target");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 150, -1));
        jPanel1.add(productFrequencyBelowTargetTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 150, -1));

        jLabel4.setText("Frequency Above Target");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 150, -1));
        jPanel1.add(productFrequencyAboveTargetTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 150, -1));

        jLabel7.setText("Marign around target");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 150, -1));

        productPricePerformanceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPricePerformanceTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productPricePerformanceTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 150, -1));

        productRevenueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productRevenueTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productRevenueTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 150, -1));

        jLabel5.setText("Sales Revenues");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 110, -1));

        jLabel3.setText("Product name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 110, -1));

        productNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 150, -1));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 600, 170));
        jPanel1.getAccessibleContext().setAccessibleName("Business -wide Product Intelligence");

        jLabel12.setText("Actual Price");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 100, -1, -1));
        add(txtactprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 120, 170, 20));

        jLabel13.setText("Quantity");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 140, -1, -1));
        add(txtquantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 170, 20));

        jButton2.setText("Remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2AddProductItemActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 310, 160, 30));

        btnRecommendation.setText("View Recommendation");
        btnRecommendation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecommendationActionPerformed(evt);
            }
        });
        add(btnRecommendation, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 230, 170, 30));

        jButton3.setText("Analyse");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 350, 160, 30));

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel14.setText("*View recommendation before adding to cart");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 260, -1, -1));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
      if (OrderItemsTable.getSelectedRow() != -1) {
    // A row is selected, proceed with the submission.
    currentOrder.Submit(); 
    JOptionPane.showMessageDialog(CardSequencePanel, "Thank you, your deal is closed.", "Submission Successful", JOptionPane.INFORMATION_MESSAGE);

    CardSequencePanel.remove(this);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
} else {
    // No row is selected, show an error message.
    JOptionPane.showMessageDialog(CardSequencePanel, "Please select a deal to close.", "Selection Required", JOptionPane.WARNING_MESSAGE);
}


    }//GEN-LAST:event_NextActionPerformed

    private void SupplierCatalogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SupplierCatalogTableMousePressed
        // TODO add your handling code here:
        int suppliertablesize = SupplierCatalogTable.getRowCount();
        int selectedrow = SupplierCatalogTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0 || selectedrow > suppliertablesize - 1) {
            return;
        }
        selectedproduct = (Product) SupplierCatalogTable.getValueAt(selectedrow, 0);
        if (selectedproduct == null) {
            return;
        }

        ProductSummary productsummary = new ProductSummary(selectedproduct);

        productNameTextField.setText(selectedproduct.toString());
        String revenues = String.valueOf(productsummary.getSalesRevenues());
        productRevenueTextField.setText(revenues);
        productFrequencyAboveTargetTextField.setText(String.valueOf(productsummary.getNumberAboveTarget()));
        productFrequencyBelowTargetTextField.setText(String.valueOf(productsummary.getNumberBelowTarget()));
        productPricePerformanceTextField.setText(String.valueOf(productsummary.getProductPricePerformance()));

    }//GEN-LAST:event_SupplierCatalogTableMousePressed

    private void productNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productNameTextFieldActionPerformed

    private void productRevenueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productRevenueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productRevenueTextFieldActionPerformed

    private void productPricePerformanceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPricePerformanceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productPricePerformanceTextFieldActionPerformed

    private void SupplierCatalogTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SupplierCatalogTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_SupplierCatalogTableMouseEntered

    private void OrderItemsTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderItemsTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderItemsTableMouseEntered

    private void OrderItemsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderItemsTableMousePressed
        // TODO add your handling code here:
        

    }//GEN-LAST:event_OrderItemsTableMousePressed

    private void AddProductItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProductItemActionPerformed
        // TODO add your handling code here:

       int suppliertablesize = SupplierCatalogTable.getRowCount();
       int selectedrow = SupplierCatalogTable.getSelectionModel().getLeadSelectionIndex();

// Check if a row is selected in the SupplierCatalogTable
if (selectedrow < 0 || selectedrow >= suppliertablesize) {
    JOptionPane.showMessageDialog(null, "Please select a product from the supplier catalog.", "Selection Required", JOptionPane.WARNING_MESSAGE);
    return;
}

// Assuming selectedproduct is declared and initialized correctly before this snippet
selectedproduct = (Product) SupplierCatalogTable.getValueAt(selectedrow, 0);
if (selectedproduct == null) {
    JOptionPane.showMessageDialog(null, "Please select a valid product.", "Invalid Product", JOptionPane.WARNING_MESSAGE);
    return;
}

// Validation for actual price
String actualPriceStr = txtactprice.getText().trim();
if (actualPriceStr.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Please enter the actual price.", "Input Required", JOptionPane.WARNING_MESSAGE);
    return;
}
int actualPrice;
try {
    actualPrice = Integer.parseInt(actualPriceStr);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Invalid format for actual price. Please enter a numeric value.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
    return;
}

// Validation for quantity
String quantityStr = txtquantity.getText().trim();
if (quantityStr.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Please enter the quantity.", "Input Required", JOptionPane.WARNING_MESSAGE);
    return;
}
int quantity;
try {
    quantity = Integer.parseInt(quantityStr);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Invalid format for quantity. Please enter a numeric value.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
    return;
}

// Proceed with adding the order item
OrderItem item = currentOrder.newOrderItem(selectedproduct, actualPrice, quantity);
Object[] row = new Object[8];

row[0] = String.valueOf(item.getSelectedProduct());
row[1] = String.valueOf(item.getActualPrice());
row[2] = String.valueOf(item.getQuantity());
row[3] = String.valueOf(item.getOrderItemTotal());

row[4] = String.valueOf(selectedproduct.getFloorPrice());
row[5] = String.valueOf(selectedproduct.getCeilingPrice());
row[6] = String.valueOf(selectedproduct.getTargetPrice());


((DefaultTableModel) OrderItemsTable.getModel()).addRow(row);
 
          txtactprice.setText("");
          txtquantity.setText("");

    }//GEN-LAST:event_AddProductItemActionPerformed

    private void SuppliersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppliersComboBoxActionPerformed
        // TODO add your handling code here:
     refreshSupplierProductCatalogTable();
    }//GEN-LAST:event_SuppliersComboBoxActionPerformed

    private void jButton2AddProductItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2AddProductItemActionPerformed
        // TODO add your handling code here:
        
        int orderItemsTableSize = OrderItemsTable.getRowCount();
int selectedRowForRemoval = OrderItemsTable.getSelectionModel().getLeadSelectionIndex();

if (selectedRowForRemoval < 0 || selectedRowForRemoval >= orderItemsTableSize) {
    // No row is selected, show an error message.
    JOptionPane.showMessageDialog(null, "Please select an order item to remove.", "Selection Required", JOptionPane.WARNING_MESSAGE);
    return;
}


// Remove the selected row from the OrderItemsTable
((DefaultTableModel) OrderItemsTable.getModel()).removeRow(selectedRowForRemoval);

// Optionally, display a confirmation message after successful removal
JOptionPane.showMessageDialog(null, "The selected order item has been successfully removed.", "Item Removed", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton2AddProductItemActionPerformed

    private void btnRecommendationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecommendationActionPerformed
        // TODO add your handling code here:
       int suppliertablesize = SupplierCatalogTable.getRowCount();
       int selectedrow = SupplierCatalogTable.getSelectionModel().getLeadSelectionIndex();

// Check if a row is selected in the SupplierCatalogTable
if (selectedrow < 0 || selectedrow >= suppliertablesize) {
    JOptionPane.showMessageDialog(null, "Please select a product from the supplier catalog to view the recommendation.", "Selection Required", JOptionPane.WARNING_MESSAGE);
    return;
}
        String selectedSupplier = (String) SuppliersComboBox.getSelectedItem();
        String customername = customerTextField.getText();
        String salespersonName = salesPersonTextField.getText();
        String productName = selectedproduct.toString();
        int ceilingPrice = selectedproduct.getCeilingPrice() ;
        int targetPrice = selectedproduct.getTargetPrice();
        int floorPrice = selectedproduct.getFloorPrice();
        int FAT = Integer.parseInt(productFrequencyAboveTargetTextField.getText());
        int FBT = Integer.parseInt(productFrequencyBelowTargetTextField.getText());
        int MAP = Integer.parseInt(productPricePerformanceTextField.getText());
        int salesRevenue = Integer.parseInt(productRevenueTextField.getText());
 
        RecommendationJPanel rjp = new RecommendationJPanel(CardSequencePanel,selectedSupplier, customername, salespersonName ,productName, ceilingPrice, floorPrice, targetPrice, FAT, FBT, MAP, salesRevenue);
        
        CardSequencePanel.add("RecommendationPanel", rjp);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
      
    }//GEN-LAST:event_btnRecommendationActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        
DefaultTableModel model = (DefaultTableModel) OrderItemsTable.getModel();
        int selectedRowIndex = OrderItemsTable.getSelectedRow(); // Get selected row index
        int orderItemsTableSize = OrderItemsTable.getRowCount();
        int FAT = Integer.parseInt(productFrequencyAboveTargetTextField.getText());
        int FBT = Integer.parseInt(productFrequencyBelowTargetTextField.getText());
        int salesRevenue = Integer.parseInt(productRevenueTextField.getText());
        int marginProfit = Integer.parseInt(productPricePerformanceTextField.getText());

        String productname = model.getValueAt(selectedRowIndex, 0).toString();
        
        if (orderItemsTableSize==0){
            JOptionPane.showMessageDialog(null, "No order Items were present to analyse the table", "Add Order Items", JOptionPane.INFORMATION_MESSAGE);
        }

      int actualPriceColumnIndex = 1;
      int targetPriceColumnIndex = 6;
      int quantityindex = 2;
      
      for (int i = 0; i < model.getRowCount(); i++) {
    // Retrieve values from "Actual Price" and "Target Price" columns for the current row
    int actualPrice = Integer.parseInt(model.getValueAt(i, actualPriceColumnIndex).toString());
    int targetPrice = Integer.parseInt(model.getValueAt(i, targetPriceColumnIndex).toString());
    int quantity = Integer.parseInt(model.getValueAt(i, quantityindex).toString());

    int newSalesRevenue = salesRevenue + (actualPrice * quantity);
    int newmarginProfit = marginProfit + ((actualPrice-targetPrice)*quantity);
     productRevenueTextField.setText(Integer.toString(newSalesRevenue));
     productPricePerformanceTextField.setText(Integer.toString(newmarginProfit));
    // Compare and update FBT & FAT
    if (actualPrice < targetPrice) {
        FBT = FBT + 1; 
    } else if (actualPrice > targetPrice) {
        FAT = FAT + 1; 

}
      }
        

      productNameTextField.setText(productname);
      productFrequencyAboveTargetTextField.setText(Integer.toString(FAT));
      productFrequencyBelowTargetTextField.setText(Integer.toString(FBT));

      

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        CardSequencePanel.remove(this);
        CardLayout layout =(CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Next;
    private javax.swing.JTable OrderItemsTable;
    private javax.swing.JTable SupplierCatalogTable;
    private javax.swing.JComboBox<String> SuppliersComboBox;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRecommendation;
    private javax.swing.JButton btnadd;
    private javax.swing.JTextField customerTextField;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField productFrequencyAboveTargetTextField;
    private javax.swing.JTextField productFrequencyBelowTargetTextField;
    private javax.swing.JTextField productNameTextField;
    private javax.swing.JTextField productPricePerformanceTextField;
    private javax.swing.JTextField productRevenueTextField;
    private javax.swing.JTextField salesPersonTextField;
    private javax.swing.JTextField txtactprice;
    private javax.swing.JTextField txtquantity;
    // End of variables declaration//GEN-END:variables

}
